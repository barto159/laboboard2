
laboboard2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080038bc  080038bc  000048bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e0  080038e0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080038e0  080038e0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e0  080038e0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e0  080038e0  000048e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038e4  080038e4  000048e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080038f4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080038f4  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aba6  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e62  00000000  00000000  0000fbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00011a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000897  00000000  00000000  00012570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017300  00000000  00000000  00012e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c52b  00000000  00000000  0002a107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008719b  00000000  00000000  00036632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd7cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  000bd810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c05b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080038a4 	.word	0x080038a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080038a4 	.word	0x080038a4

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	@ 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000152:	4b35      	ldr	r3, [pc, #212]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000154:	4a35      	ldr	r2, [pc, #212]	@ (800022c <MX_CAN_Init+0xe0>)
 8000156:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000158:	4b33      	ldr	r3, [pc, #204]	@ (8000228 <MX_CAN_Init+0xdc>)
 800015a:	2201      	movs	r2, #1
 800015c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015e:	4b32      	ldr	r3, [pc, #200]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000160:	2200      	movs	r2, #0
 8000162:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000164:	4b30      	ldr	r3, [pc, #192]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000166:	2200      	movs	r2, #0
 8000168:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800016a:	4b2f      	ldr	r3, [pc, #188]	@ (8000228 <MX_CAN_Init+0xdc>)
 800016c:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000170:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000172:	4b2d      	ldr	r3, [pc, #180]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000174:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000178:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017a:	4b2b      	ldr	r3, [pc, #172]	@ (8000228 <MX_CAN_Init+0xdc>)
 800017c:	2200      	movs	r2, #0
 800017e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000180:	4b29      	ldr	r3, [pc, #164]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000182:	2200      	movs	r2, #0
 8000184:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000186:	4b28      	ldr	r3, [pc, #160]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000188:	2200      	movs	r2, #0
 800018a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800018c:	4b26      	ldr	r3, [pc, #152]	@ (8000228 <MX_CAN_Init+0xdc>)
 800018e:	2201      	movs	r2, #1
 8000190:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000192:	4b25      	ldr	r3, [pc, #148]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000194:	2200      	movs	r2, #0
 8000196:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000198:	4b23      	ldr	r3, [pc, #140]	@ (8000228 <MX_CAN_Init+0xdc>)
 800019a:	2200      	movs	r2, #0
 800019c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019e:	4822      	ldr	r0, [pc, #136]	@ (8000228 <MX_CAN_Init+0xdc>)
 80001a0:	f000 ff2e 	bl	8001000 <HAL_CAN_Init>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d001      	beq.n	80001ae <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80001aa:	f000 fc42 	bl	8000a32 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sFilterConfig;

     sFilterConfig.FilterBank = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	617b      	str	r3, [r7, #20]
     sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001b2:	2300      	movs	r3, #0
 80001b4:	61bb      	str	r3, [r7, #24]
     sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001b6:	2301      	movs	r3, #1
 80001b8:	61fb      	str	r3, [r7, #28]
     sFilterConfig.FilterIdHigh = 0x0000;
 80001ba:	2300      	movs	r3, #0
 80001bc:	603b      	str	r3, [r7, #0]
     sFilterConfig.FilterIdLow = 0x0000;
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
     sFilterConfig.FilterMaskIdHigh = 0x0000;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60bb      	str	r3, [r7, #8]
     sFilterConfig.FilterMaskIdLow = 0x0000;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
     sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	613b      	str	r3, [r7, #16]
     sFilterConfig.FilterActivation = ENABLE;
 80001ce:	2301      	movs	r3, #1
 80001d0:	623b      	str	r3, [r7, #32]
     sFilterConfig.SlaveStartFilterBank = 14;
 80001d2:	230e      	movs	r3, #14
 80001d4:	627b      	str	r3, [r7, #36]	@ 0x24

     	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80001d6:	463b      	mov	r3, r7
 80001d8:	4619      	mov	r1, r3
 80001da:	4813      	ldr	r0, [pc, #76]	@ (8000228 <MX_CAN_Init+0xdc>)
 80001dc:	f001 f80b 	bl	80011f6 <HAL_CAN_ConfigFilter>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <MX_CAN_Init+0x9e>
     	{
     	    Error_Handler();
 80001e6:	f000 fc24 	bl	8000a32 <Error_Handler>
     	}
     	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK)
 80001ea:	2102      	movs	r1, #2
 80001ec:	480e      	ldr	r0, [pc, #56]	@ (8000228 <MX_CAN_Init+0xdc>)
 80001ee:	f001 fa30 	bl	8001652 <HAL_CAN_ActivateNotification>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <MX_CAN_Init+0xb0>
     	{
     		Error_Handler();
 80001f8:	f000 fc1b 	bl	8000a32 <Error_Handler>
     	}
     	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING)!=HAL_OK)
 80001fc:	2110      	movs	r1, #16
 80001fe:	480a      	ldr	r0, [pc, #40]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000200:	f001 fa27 	bl	8001652 <HAL_CAN_ActivateNotification>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_CAN_Init+0xc2>
     	{
     		Error_Handler();
 800020a:	f000 fc12 	bl	8000a32 <Error_Handler>
       }
       if (HAL_CAN_Start(&hcan) != HAL_OK)
 800020e:	4806      	ldr	r0, [pc, #24]	@ (8000228 <MX_CAN_Init+0xdc>)
 8000210:	f001 f8ba 	bl	8001388 <HAL_CAN_Start>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <MX_CAN_Init+0xd2>
     	{
     	Error_Handler ();
 800021a:	f000 fc0a 	bl	8000a32 <Error_Handler>
     	}
  /* USER CODE END CAN_Init 2 */

}
 800021e:	bf00      	nop
 8000220:	3728      	adds	r7, #40	@ 0x28
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000054 	.word	0x20000054
 800022c:	40006400 	.word	0x40006400

08000230 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000238:	f107 0310 	add.w	r3, r7, #16
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a28      	ldr	r2, [pc, #160]	@ (80002ec <HAL_CAN_MspInit+0xbc>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d149      	bne.n	80002e4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000250:	4b27      	ldr	r3, [pc, #156]	@ (80002f0 <HAL_CAN_MspInit+0xc0>)
 8000252:	69db      	ldr	r3, [r3, #28]
 8000254:	4a26      	ldr	r2, [pc, #152]	@ (80002f0 <HAL_CAN_MspInit+0xc0>)
 8000256:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800025a:	61d3      	str	r3, [r2, #28]
 800025c:	4b24      	ldr	r3, [pc, #144]	@ (80002f0 <HAL_CAN_MspInit+0xc0>)
 800025e:	69db      	ldr	r3, [r3, #28]
 8000260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000268:	4b21      	ldr	r3, [pc, #132]	@ (80002f0 <HAL_CAN_MspInit+0xc0>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a20      	ldr	r2, [pc, #128]	@ (80002f0 <HAL_CAN_MspInit+0xc0>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b1e      	ldr	r3, [pc, #120]	@ (80002f0 <HAL_CAN_MspInit+0xc0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0304 	and.w	r3, r3, #4
 800027c:	60bb      	str	r3, [r7, #8]
 800027e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000280:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028e:	f107 0310 	add.w	r3, r7, #16
 8000292:	4619      	mov	r1, r3
 8000294:	4817      	ldr	r0, [pc, #92]	@ (80002f4 <HAL_CAN_MspInit+0xc4>)
 8000296:	f001 fd65 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800029a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800029e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a0:	2302      	movs	r3, #2
 80002a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a4:	2303      	movs	r3, #3
 80002a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a8:	f107 0310 	add.w	r3, r7, #16
 80002ac:	4619      	mov	r1, r3
 80002ae:	4811      	ldr	r0, [pc, #68]	@ (80002f4 <HAL_CAN_MspInit+0xc4>)
 80002b0:	f001 fd58 	bl	8001d64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2105      	movs	r1, #5
 80002b8:	2013      	movs	r0, #19
 80002ba:	f001 fd0e 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80002be:	2013      	movs	r0, #19
 80002c0:	f001 fd27 	bl	8001d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2105      	movs	r1, #5
 80002c8:	2014      	movs	r0, #20
 80002ca:	f001 fd06 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80002ce:	2014      	movs	r0, #20
 80002d0:	f001 fd1f 	bl	8001d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2105      	movs	r1, #5
 80002d8:	2015      	movs	r0, #21
 80002da:	f001 fcfe 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80002de:	2015      	movs	r0, #21
 80002e0:	f001 fd17 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002e4:	bf00      	nop
 80002e6:	3720      	adds	r7, #32
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40006400 	.word	0x40006400
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010800 	.word	0x40010800

080002f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000300:	4b19      	ldr	r3, [pc, #100]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000302:	4a1a      	ldr	r2, [pc, #104]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000304:	2100      	movs	r1, #0
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f001 f882 	bl	8001410 <HAL_CAN_GetRxMessage>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000312:	f000 fb8e 	bl	8000a32 <Error_Handler>
  }

  if(RxHeader.StdId== 200)
 8000316:	4b15      	ldr	r3, [pc, #84]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2bc8      	cmp	r3, #200	@ 0xc8
 800031c:	d108      	bne.n	8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
  {
	  Set_Motor2(RxData[0] , RxData[1]);
 800031e:	4b12      	ldr	r3, [pc, #72]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	461a      	mov	r2, r3
 8000324:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000326:	785b      	ldrb	r3, [r3, #1]
 8000328:	4619      	mov	r1, r3
 800032a:	4610      	mov	r0, r2
 800032c:	f000 f9c6 	bl	80006bc <Set_Motor2>
  }
  if(RxHeader.StdId== 201)
 8000330:	4b0e      	ldr	r3, [pc, #56]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2bc9      	cmp	r3, #201	@ 0xc9
 8000336:	d104      	bne.n	8000342 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
    {
	  Pomp(RxData[0]);
 8000338:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f9fd 	bl	800073c <Pomp>
    }
  if(RxHeader.StdId== 202)
 8000342:	4b0a      	ldr	r3, [pc, #40]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2bca      	cmp	r3, #202	@ 0xca
 8000348:	d104      	bne.n	8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
    {
	  dir=RxData[0];
 800034a:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	461a      	mov	r2, r3
 8000350:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000352:	601a      	str	r2, [r3, #0]
    }
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000354:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000358:	4806      	ldr	r0, [pc, #24]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800035a:	f001 feb6 	bl	80020ca <HAL_GPIO_TogglePin>
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000044 	.word	0x20000044
 800036c:	20000028 	.word	0x20000028
 8000370:	20000090 	.word	0x20000090
 8000374:	40011000 	.word	0x40011000

08000378 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038c:	4b48      	ldr	r3, [pc, #288]	@ (80004b0 <MX_GPIO_Init+0x138>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a47      	ldr	r2, [pc, #284]	@ (80004b0 <MX_GPIO_Init+0x138>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b45      	ldr	r3, [pc, #276]	@ (80004b0 <MX_GPIO_Init+0x138>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0310 	and.w	r3, r3, #16
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b42      	ldr	r3, [pc, #264]	@ (80004b0 <MX_GPIO_Init+0x138>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a41      	ldr	r2, [pc, #260]	@ (80004b0 <MX_GPIO_Init+0x138>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b3f      	ldr	r3, [pc, #252]	@ (80004b0 <MX_GPIO_Init+0x138>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	4b3c      	ldr	r3, [pc, #240]	@ (80004b0 <MX_GPIO_Init+0x138>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a3b      	ldr	r2, [pc, #236]	@ (80004b0 <MX_GPIO_Init+0x138>)
 80003c2:	f043 0308 	orr.w	r3, r3, #8
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b39      	ldr	r3, [pc, #228]	@ (80004b0 <MX_GPIO_Init+0x138>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0308 	and.w	r3, r3, #8
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|Motor1_D_Pin
 80003d4:	2200      	movs	r2, #0
 80003d6:	f24e 11fc 	movw	r1, #57852	@ 0xe1fc
 80003da:	4836      	ldr	r0, [pc, #216]	@ (80004b4 <MX_GPIO_Init+0x13c>)
 80003dc:	f001 fe5d 	bl	800209a <HAL_GPIO_WritePin>
                          |Motor1_EN_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin
                          |OUT4_Pin|OUT5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_IN1_Pin|Motor1_IN2_Pin|Motor2_D_Pin|Motor2_IN1_Pin
 80003e0:	2200      	movs	r2, #0
 80003e2:	21cb      	movs	r1, #203	@ 0xcb
 80003e4:	4834      	ldr	r0, [pc, #208]	@ (80004b8 <MX_GPIO_Init+0x140>)
 80003e6:	f001 fe58 	bl	800209a <HAL_GPIO_WritePin>
                          |Motor2_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor3_IN1_Pin|Motor3_IN2_Pin|Motor3_D_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2107      	movs	r1, #7
 80003ee:	4833      	ldr	r0, [pc, #204]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003f0:	f001 fe53 	bl	800209a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin Motor1_D_Pin
                           Motor1_EN_Pin OUT1_Pin OUT2_Pin OUT3_Pin
                           OUT4_Pin OUT5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|Motor1_D_Pin
 80003f4:	f24e 13fc 	movw	r3, #57852	@ 0xe1fc
 80003f8:	613b      	str	r3, [r7, #16]
                          |Motor1_EN_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin
                          |OUT4_Pin|OUT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2302      	movs	r3, #2
 8000404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	4619      	mov	r1, r3
 800040c:	4829      	ldr	r0, [pc, #164]	@ (80004b4 <MX_GPIO_Init+0x13c>)
 800040e:	f001 fca9 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1_IN1_Pin Motor1_IN2_Pin Motor2_D_Pin Motor2_IN1_Pin
                           Motor2_IN2_Pin */
  GPIO_InitStruct.Pin = Motor1_IN1_Pin|Motor1_IN2_Pin|Motor2_D_Pin|Motor2_IN1_Pin
 8000412:	23cb      	movs	r3, #203	@ 0xcb
 8000414:	613b      	str	r3, [r7, #16]
                          |Motor2_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	4823      	ldr	r0, [pc, #140]	@ (80004b8 <MX_GPIO_Init+0x140>)
 800042a:	f001 fc9b 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3_IN1_Pin Motor3_IN2_Pin Motor3_D_Pin */
  GPIO_InitStruct.Pin = Motor3_IN1_Pin|Motor3_IN2_Pin|Motor3_D_Pin;
 800042e:	2307      	movs	r3, #7
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2302      	movs	r3, #2
 800043c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	481d      	ldr	r0, [pc, #116]	@ (80004bc <MX_GPIO_Init+0x144>)
 8000446:	f001 fc8d 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 800044a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800044e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <MX_GPIO_Init+0x148>)
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000454:	2302      	movs	r3, #2
 8000456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4817      	ldr	r0, [pc, #92]	@ (80004bc <MX_GPIO_Init+0x144>)
 8000460:	f001 fc80 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8000464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800046a:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <MX_GPIO_Init+0x148>)
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800046e:	2301      	movs	r3, #1
 8000470:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	4810      	ldr	r0, [pc, #64]	@ (80004bc <MX_GPIO_Init+0x144>)
 800047a:	f001 fc73 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin Switch4_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin|Switch4_Pin;
 800047e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <MX_GPIO_Init+0x14c>)
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000488:	2301      	movs	r3, #1
 800048a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	480a      	ldr	r0, [pc, #40]	@ (80004bc <MX_GPIO_Init+0x144>)
 8000494:	f001 fc66 	bl	8001d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2100      	movs	r1, #0
 800049c:	2028      	movs	r0, #40	@ 0x28
 800049e:	f001 fc1c 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004a2:	2028      	movs	r0, #40	@ 0x28
 80004a4:	f001 fc35 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40011000 	.word	0x40011000
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	10310000 	.word	0x10310000
 80004c4:	10210000 	.word	0x10210000

080004c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick();
 80004d2:	f000 fd8b 	bl	8000fec <HAL_GetTick>
 80004d6:	60f8      	str	r0, [r7, #12]

    if ((GPIO_Pin == GPIO_PIN_12) && (currentTime - lastDebounceTime_Pin12 > debounceDelay))
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80004de:	d116      	bne.n	800050e <HAL_GPIO_EXTI_Callback+0x46>
 80004e0:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <HAL_GPIO_EXTI_Callback+0xc0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	2232      	movs	r2, #50	@ 0x32
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d90f      	bls.n	800050e <HAL_GPIO_EXTI_Callback+0x46>
    {
        lastDebounceTime_Pin12 = currentTime;
 80004ee:	4a26      	ldr	r2, [pc, #152]	@ (8000588 <HAL_GPIO_EXTI_Callback+0xc0>)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6013      	str	r3, [r2, #0]
        if (limit == 0)
 80004f4:	4b25      	ldr	r3, [pc, #148]	@ (800058c <HAL_GPIO_EXTI_Callback+0xc4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d104      	bne.n	8000506 <HAL_GPIO_EXTI_Callback+0x3e>
            limit = -1;
 80004fc:	4b23      	ldr	r3, [pc, #140]	@ (800058c <HAL_GPIO_EXTI_Callback+0xc4>)
 80004fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000502:	601a      	str	r2, [r3, #0]
        if (limit == 0)
 8000504:	e03b      	b.n	800057e <HAL_GPIO_EXTI_Callback+0xb6>
        else
            limit = 0;
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
        if (limit == 0)
 800050c:	e037      	b.n	800057e <HAL_GPIO_EXTI_Callback+0xb6>
    }
    else if ((GPIO_Pin == GPIO_PIN_13) && (currentTime - lastDebounceTime_Pin13 > debounceDelay))
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000514:	d115      	bne.n	8000542 <HAL_GPIO_EXTI_Callback+0x7a>
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	2232      	movs	r2, #50	@ 0x32
 8000520:	4293      	cmp	r3, r2
 8000522:	d90e      	bls.n	8000542 <HAL_GPIO_EXTI_Callback+0x7a>
    {
        lastDebounceTime_Pin13 = currentTime;
 8000524:	4a1a      	ldr	r2, [pc, #104]	@ (8000590 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	6013      	str	r3, [r2, #0]
        if (limit == 0)
 800052a:	4b18      	ldr	r3, [pc, #96]	@ (800058c <HAL_GPIO_EXTI_Callback+0xc4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d103      	bne.n	800053a <HAL_GPIO_EXTI_Callback+0x72>
            limit = 1;
 8000532:	4b16      	ldr	r3, [pc, #88]	@ (800058c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
        if (limit == 0)
 8000538:	e021      	b.n	800057e <HAL_GPIO_EXTI_Callback+0xb6>
        else
            limit = 0;
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <HAL_GPIO_EXTI_Callback+0xc4>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
        if (limit == 0)
 8000540:	e01d      	b.n	800057e <HAL_GPIO_EXTI_Callback+0xb6>
    }
    else if ((GPIO_Pin == GPIO_PIN_14) && (currentTime - lastDebounceTime_Pin14 > debounceDelay))
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000548:	d10a      	bne.n	8000560 <HAL_GPIO_EXTI_Callback+0x98>
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <HAL_GPIO_EXTI_Callback+0xcc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	2232      	movs	r2, #50	@ 0x32
 8000554:	4293      	cmp	r3, r2
 8000556:	d903      	bls.n	8000560 <HAL_GPIO_EXTI_Callback+0x98>
    {
        lastDebounceTime_Pin14 = currentTime;
 8000558:	4a0e      	ldr	r2, [pc, #56]	@ (8000594 <HAL_GPIO_EXTI_Callback+0xcc>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	e00e      	b.n	800057e <HAL_GPIO_EXTI_Callback+0xb6>
    }
    else if ((GPIO_Pin == GPIO_PIN_15) && (currentTime - lastDebounceTime_Pin15 > debounceDelay))
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000566:	d10a      	bne.n	800057e <HAL_GPIO_EXTI_Callback+0xb6>
 8000568:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <HAL_GPIO_EXTI_Callback+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	2232      	movs	r2, #50	@ 0x32
 8000572:	4293      	cmp	r3, r2
 8000574:	d903      	bls.n	800057e <HAL_GPIO_EXTI_Callback+0xb6>
    {
        lastDebounceTime_Pin15 = currentTime;
 8000576:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	6013      	str	r3, [r2, #0]
    }
}
 800057c:	e7ff      	b.n	800057e <HAL_GPIO_EXTI_Callback+0xb6>
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2000007c 	.word	0x2000007c
 800058c:	2000008c 	.word	0x2000008c
 8000590:	20000080 	.word	0x20000080
 8000594:	20000084 	.word	0x20000084
 8000598:	20000088 	.word	0x20000088

0800059c <Motor_init>:

void Motor_init()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 80005a0:	210c      	movs	r1, #12
 80005a2:	4821      	ldr	r0, [pc, #132]	@ (8000628 <Motor_init+0x8c>)
 80005a4:	f002 fa9c 	bl	8002ae0 <HAL_TIM_PWM_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80005a8:	2108      	movs	r1, #8
 80005aa:	481f      	ldr	r0, [pc, #124]	@ (8000628 <Motor_init+0x8c>)
 80005ac:	f002 fa98 	bl	8002ae0 <HAL_TIM_PWM_Start_IT>


	 HAL_GPIO_WritePin(Motor1_D_GPIO_Port, Motor1_D_Pin,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2104      	movs	r1, #4
 80005b4:	481d      	ldr	r0, [pc, #116]	@ (800062c <Motor_init+0x90>)
 80005b6:	f001 fd70 	bl	800209a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	481c      	ldr	r0, [pc, #112]	@ (8000630 <Motor_init+0x94>)
 80005c0:	f001 fd6b 	bl	800209a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2102      	movs	r1, #2
 80005c8:	4819      	ldr	r0, [pc, #100]	@ (8000630 <Motor_init+0x94>)
 80005ca:	f001 fd66 	bl	800209a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin,0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2108      	movs	r1, #8
 80005d2:	4816      	ldr	r0, [pc, #88]	@ (800062c <Motor_init+0x90>)
 80005d4:	f001 fd61 	bl	800209a <HAL_GPIO_WritePin>


	 HAL_GPIO_WritePin(Motor2_D_GPIO_Port, Motor2_D_Pin,0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2108      	movs	r1, #8
 80005dc:	4814      	ldr	r0, [pc, #80]	@ (8000630 <Motor_init+0x94>)
 80005de:	f001 fd5c 	bl	800209a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	@ 0x40
 80005e6:	4812      	ldr	r0, [pc, #72]	@ (8000630 <Motor_init+0x94>)
 80005e8:	f001 fd57 	bl	800209a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	480f      	ldr	r0, [pc, #60]	@ (8000630 <Motor_init+0x94>)
 80005f2:	f001 fd52 	bl	800209a <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Motor_init+0x8c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	641a      	str	r2, [r3, #64]	@ 0x40


	 HAL_GPIO_WritePin(Motor3_D_GPIO_Port, Motor3_D_Pin,0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2104      	movs	r1, #4
 8000602:	480c      	ldr	r0, [pc, #48]	@ (8000634 <Motor_init+0x98>)
 8000604:	f001 fd49 	bl	800209a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor3_IN1_GPIO_Port, Motor3_IN1_Pin,0);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <Motor_init+0x98>)
 800060e:	f001 fd44 	bl	800209a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor3_IN2_GPIO_Port, Motor3_IN2_Pin,0);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <Motor_init+0x98>)
 8000618:	f001 fd3f 	bl	800209a <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 800061c:	4b02      	ldr	r3, [pc, #8]	@ (8000628 <Motor_init+0x8c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	63da      	str	r2, [r3, #60]	@ 0x3c



}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000094 	.word	0x20000094
 800062c:	40011000 	.word	0x40011000
 8000630:	40010800 	.word	0x40010800
 8000634:	40010c00 	.word	0x40010c00

08000638 <Set_Motor1>:

void Set_Motor1(int direction)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	if(direction==1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d10f      	bne.n	8000666 <Set_Motor1+0x2e>
	{
		 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,1);
 8000646:	2201      	movs	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	481a      	ldr	r0, [pc, #104]	@ (80006b4 <Set_Motor1+0x7c>)
 800064c:	f001 fd25 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,0);
 8000650:	2200      	movs	r2, #0
 8000652:	2102      	movs	r1, #2
 8000654:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <Set_Motor1+0x7c>)
 8000656:	f001 fd20 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin,1);
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	4816      	ldr	r0, [pc, #88]	@ (80006b8 <Set_Motor1+0x80>)
 8000660:	f001 fd1b 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,0);
		 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,0);
		 HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin,0);
	}

}
 8000664:	e021      	b.n	80006aa <Set_Motor1+0x72>
	else if(direction==2)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d10f      	bne.n	800068c <Set_Motor1+0x54>
		 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,0);
 800066c:	2200      	movs	r2, #0
 800066e:	2101      	movs	r1, #1
 8000670:	4810      	ldr	r0, [pc, #64]	@ (80006b4 <Set_Motor1+0x7c>)
 8000672:	f001 fd12 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,1);
 8000676:	2201      	movs	r2, #1
 8000678:	2102      	movs	r1, #2
 800067a:	480e      	ldr	r0, [pc, #56]	@ (80006b4 <Set_Motor1+0x7c>)
 800067c:	f001 fd0d 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin,1);
 8000680:	2201      	movs	r2, #1
 8000682:	2108      	movs	r1, #8
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <Set_Motor1+0x80>)
 8000686:	f001 fd08 	bl	800209a <HAL_GPIO_WritePin>
}
 800068a:	e00e      	b.n	80006aa <Set_Motor1+0x72>
		 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,0);
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <Set_Motor1+0x7c>)
 8000692:	f001 fd02 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,0);
 8000696:	2200      	movs	r2, #0
 8000698:	2102      	movs	r1, #2
 800069a:	4806      	ldr	r0, [pc, #24]	@ (80006b4 <Set_Motor1+0x7c>)
 800069c:	f001 fcfd 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin,0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2108      	movs	r1, #8
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <Set_Motor1+0x80>)
 80006a6:	f001 fcf8 	bl	800209a <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40011000 	.word	0x40011000

080006bc <Set_Motor2>:
void Set_Motor2(int direction , int speed)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	if(direction==1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10e      	bne.n	80006ea <Set_Motor2+0x2e>
	{
		 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4818      	ldr	r0, [pc, #96]	@ (8000734 <Set_Motor2+0x78>)
 80006d2:	f001 fce2 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	@ 0x80
 80006da:	4816      	ldr	r0, [pc, #88]	@ (8000734 <Set_Motor2+0x78>)
 80006dc:	f001 fcdd 	bl	800209a <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,speed);
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <Set_Motor2+0x7c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	641a      	str	r2, [r3, #64]	@ 0x40
		 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,0);
		 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,0);
		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
	}

}
 80006e8:	e01f      	b.n	800072a <Set_Motor2+0x6e>
	else if(direction==2)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d10e      	bne.n	800070e <Set_Motor2+0x52>
		 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2140      	movs	r1, #64	@ 0x40
 80006f4:	480f      	ldr	r0, [pc, #60]	@ (8000734 <Set_Motor2+0x78>)
 80006f6:	f001 fcd0 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <Set_Motor2+0x78>)
 8000700:	f001 fccb 	bl	800209a <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,speed);
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <Set_Motor2+0x7c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800070c:	e00d      	b.n	800072a <Set_Motor2+0x6e>
		 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,0);
 800070e:	2200      	movs	r2, #0
 8000710:	2140      	movs	r1, #64	@ 0x40
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <Set_Motor2+0x78>)
 8000714:	f001 fcc1 	bl	800209a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,0);
 8000718:	2200      	movs	r2, #0
 800071a:	2180      	movs	r1, #128	@ 0x80
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <Set_Motor2+0x78>)
 800071e:	f001 fcbc 	bl	800209a <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <Set_Motor2+0x7c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2200      	movs	r2, #0
 8000728:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40010800 	.word	0x40010800
 8000738:	20000094 	.word	0x20000094

0800073c <Pomp>:
		 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
	}

}
void Pomp(int pomps)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	switch(pomps)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b05      	cmp	r3, #5
 8000748:	f200 80f7 	bhi.w	800093a <Pomp+0x1fe>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <Pomp+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	0800076d 	.word	0x0800076d
 8000758:	080007b5 	.word	0x080007b5
 800075c:	08000803 	.word	0x08000803
 8000760:	08000851 	.word	0x08000851
 8000764:	0800089f 	.word	0x0800089f
 8000768:	080008ed 	.word	0x080008ed
			{
	case 0:
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2110      	movs	r1, #16
 8000770:	4874      	ldr	r0, [pc, #464]	@ (8000944 <Pomp+0x208>)
 8000772:	f001 fc92 	bl	800209a <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2120      	movs	r1, #32
 800077a:	4872      	ldr	r0, [pc, #456]	@ (8000944 <Pomp+0x208>)
 800077c:	f001 fc8d 	bl	800209a <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2140      	movs	r1, #64	@ 0x40
 8000784:	486f      	ldr	r0, [pc, #444]	@ (8000944 <Pomp+0x208>)
 8000786:	f001 fc88 	bl	800209a <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	486d      	ldr	r0, [pc, #436]	@ (8000944 <Pomp+0x208>)
 8000790:	f001 fc83 	bl	800209a <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079a:	486a      	ldr	r0, [pc, #424]	@ (8000944 <Pomp+0x208>)
 800079c:	f001 fc7d 	bl	800209a <HAL_GPIO_WritePin>
	   HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80007a0:	201d      	movs	r0, #29
 80007a2:	f001 fac4 	bl	8001d2e <HAL_NVIC_DisableIRQ>
	   czas=0;
 80007a6:	4b68      	ldr	r3, [pc, #416]	@ (8000948 <Pomp+0x20c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
	   counter=0;
 80007ac:	4b67      	ldr	r3, [pc, #412]	@ (800094c <Pomp+0x210>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	801a      	strh	r2, [r3, #0]

		break;
 80007b2:	e0c2      	b.n	800093a <Pomp+0x1fe>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2110      	movs	r1, #16
 80007b8:	4862      	ldr	r0, [pc, #392]	@ (8000944 <Pomp+0x208>)
 80007ba:	f001 fc6e 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	4860      	ldr	r0, [pc, #384]	@ (8000944 <Pomp+0x208>)
 80007c4:	f001 fc69 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2140      	movs	r1, #64	@ 0x40
 80007cc:	485d      	ldr	r0, [pc, #372]	@ (8000944 <Pomp+0x208>)
 80007ce:	f001 fc64 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2180      	movs	r1, #128	@ 0x80
 80007d6:	485b      	ldr	r0, [pc, #364]	@ (8000944 <Pomp+0x208>)
 80007d8:	f001 fc5f 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e2:	4858      	ldr	r0, [pc, #352]	@ (8000944 <Pomp+0x208>)
 80007e4:	f001 fc59 	bl	800209a <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80007e8:	201d      	movs	r0, #29
 80007ea:	f001 faa0 	bl	8001d2e <HAL_NVIC_DisableIRQ>
		czas=10;
 80007ee:	4b56      	ldr	r3, [pc, #344]	@ (8000948 <Pomp+0x20c>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	601a      	str	r2, [r3, #0]
		counter=0;
 80007f4:	4b55      	ldr	r3, [pc, #340]	@ (800094c <Pomp+0x210>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	801a      	strh	r2, [r3, #0]
	    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007fa:	201d      	movs	r0, #29
 80007fc:	f001 fa89 	bl	8001d12 <HAL_NVIC_EnableIRQ>

		break;
 8000800:	e09b      	b.n	800093a <Pomp+0x1fe>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2110      	movs	r1, #16
 8000806:	484f      	ldr	r0, [pc, #316]	@ (8000944 <Pomp+0x208>)
 8000808:	f001 fc47 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2120      	movs	r1, #32
 8000810:	484c      	ldr	r0, [pc, #304]	@ (8000944 <Pomp+0x208>)
 8000812:	f001 fc42 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	@ 0x40
 800081a:	484a      	ldr	r0, [pc, #296]	@ (8000944 <Pomp+0x208>)
 800081c:	f001 fc3d 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	4847      	ldr	r0, [pc, #284]	@ (8000944 <Pomp+0x208>)
 8000826:	f001 fc38 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000830:	4844      	ldr	r0, [pc, #272]	@ (8000944 <Pomp+0x208>)
 8000832:	f001 fc32 	bl	800209a <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000836:	201d      	movs	r0, #29
 8000838:	f001 fa79 	bl	8001d2e <HAL_NVIC_DisableIRQ>
		czas=10;
 800083c:	4b42      	ldr	r3, [pc, #264]	@ (8000948 <Pomp+0x20c>)
 800083e:	220a      	movs	r2, #10
 8000840:	601a      	str	r2, [r3, #0]
		counter=0;
 8000842:	4b42      	ldr	r3, [pc, #264]	@ (800094c <Pomp+0x210>)
 8000844:	2200      	movs	r2, #0
 8000846:	801a      	strh	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000848:	201d      	movs	r0, #29
 800084a:	f001 fa62 	bl	8001d12 <HAL_NVIC_EnableIRQ>
		break;
 800084e:	e074      	b.n	800093a <Pomp+0x1fe>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2110      	movs	r1, #16
 8000854:	483b      	ldr	r0, [pc, #236]	@ (8000944 <Pomp+0x208>)
 8000856:	f001 fc20 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	4839      	ldr	r0, [pc, #228]	@ (8000944 <Pomp+0x208>)
 8000860:	f001 fc1b 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2140      	movs	r1, #64	@ 0x40
 8000868:	4836      	ldr	r0, [pc, #216]	@ (8000944 <Pomp+0x208>)
 800086a:	f001 fc16 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	4834      	ldr	r0, [pc, #208]	@ (8000944 <Pomp+0x208>)
 8000874:	f001 fc11 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800087e:	4831      	ldr	r0, [pc, #196]	@ (8000944 <Pomp+0x208>)
 8000880:	f001 fc0b 	bl	800209a <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000884:	201d      	movs	r0, #29
 8000886:	f001 fa52 	bl	8001d2e <HAL_NVIC_DisableIRQ>
		czas=10;
 800088a:	4b2f      	ldr	r3, [pc, #188]	@ (8000948 <Pomp+0x20c>)
 800088c:	220a      	movs	r2, #10
 800088e:	601a      	str	r2, [r3, #0]
		counter=0;
 8000890:	4b2e      	ldr	r3, [pc, #184]	@ (800094c <Pomp+0x210>)
 8000892:	2200      	movs	r2, #0
 8000894:	801a      	strh	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000896:	201d      	movs	r0, #29
 8000898:	f001 fa3b 	bl	8001d12 <HAL_NVIC_EnableIRQ>
		break;
 800089c:	e04d      	b.n	800093a <Pomp+0x1fe>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2110      	movs	r1, #16
 80008a2:	4828      	ldr	r0, [pc, #160]	@ (8000944 <Pomp+0x208>)
 80008a4:	f001 fbf9 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2120      	movs	r1, #32
 80008ac:	4825      	ldr	r0, [pc, #148]	@ (8000944 <Pomp+0x208>)
 80008ae:	f001 fbf4 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2140      	movs	r1, #64	@ 0x40
 80008b6:	4823      	ldr	r0, [pc, #140]	@ (8000944 <Pomp+0x208>)
 80008b8:	f001 fbef 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2180      	movs	r1, #128	@ 0x80
 80008c0:	4820      	ldr	r0, [pc, #128]	@ (8000944 <Pomp+0x208>)
 80008c2:	f001 fbea 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008cc:	481d      	ldr	r0, [pc, #116]	@ (8000944 <Pomp+0x208>)
 80008ce:	f001 fbe4 	bl	800209a <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80008d2:	201d      	movs	r0, #29
 80008d4:	f001 fa2b 	bl	8001d2e <HAL_NVIC_DisableIRQ>
		czas=10;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <Pomp+0x20c>)
 80008da:	220a      	movs	r2, #10
 80008dc:	601a      	str	r2, [r3, #0]
		counter=0;
 80008de:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <Pomp+0x210>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	801a      	strh	r2, [r3, #0]
	    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008e4:	201d      	movs	r0, #29
 80008e6:	f001 fa14 	bl	8001d12 <HAL_NVIC_EnableIRQ>
		break;
 80008ea:	e026      	b.n	800093a <Pomp+0x1fe>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2110      	movs	r1, #16
 80008f0:	4814      	ldr	r0, [pc, #80]	@ (8000944 <Pomp+0x208>)
 80008f2:	f001 fbd2 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	4812      	ldr	r0, [pc, #72]	@ (8000944 <Pomp+0x208>)
 80008fc:	f001 fbcd 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2140      	movs	r1, #64	@ 0x40
 8000904:	480f      	ldr	r0, [pc, #60]	@ (8000944 <Pomp+0x208>)
 8000906:	f001 fbc8 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <Pomp+0x208>)
 8000910:	f001 fbc3 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800091a:	480a      	ldr	r0, [pc, #40]	@ (8000944 <Pomp+0x208>)
 800091c:	f001 fbbd 	bl	800209a <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000920:	201d      	movs	r0, #29
 8000922:	f001 fa04 	bl	8001d2e <HAL_NVIC_DisableIRQ>
		czas=10;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <Pomp+0x20c>)
 8000928:	220a      	movs	r2, #10
 800092a:	601a      	str	r2, [r3, #0]
		counter=0;
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <Pomp+0x210>)
 800092e:	2200      	movs	r2, #0
 8000930:	801a      	strh	r2, [r3, #0]
	    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000932:	201d      	movs	r0, #29
 8000934:	f001 f9ed 	bl	8001d12 <HAL_NVIC_EnableIRQ>
		break;
 8000938:	bf00      	nop
}
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40011000 	.word	0x40011000
 8000948:	2000004c 	.word	0x2000004c
 800094c:	20000050 	.word	0x20000050

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 faf2 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f830 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f7ff fd0c 	bl	8000378 <MX_GPIO_Init>
  MX_CAN_Init();
 8000960:	f7ff fbf4 	bl	800014c <MX_CAN_Init>
  MX_TIM2_Init();
 8000964:	f000 f970 	bl	8000c48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000968:	f000 f9ee 	bl	8000d48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Motor_init();
 800096c:	f7ff fe16 	bl	800059c <Motor_init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000970:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <main+0x60>)
 8000972:	f002 f80b 	bl	800298c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000976:	201d      	movs	r0, #29
 8000978:	f001 f9d9 	bl	8001d2e <HAL_NVIC_DisableIRQ>
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==GPIO_PIN_SET)
 800097c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <main+0x64>)
 8000982:	f001 fb73 	bl	800206c <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d103      	bne.n	8000994 <main+0x44>
  {
	  limit=-1;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <main+0x68>)
 800098e:	f04f 32ff 	mov.w	r2, #4294967295
 8000992:	601a      	str	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==GPIO_PIN_RESET)
 8000994:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000998:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <main+0x64>)
 800099a:	f001 fb67 	bl	800206c <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d103      	bne.n	80009ac <main+0x5c>
  {
	  limit=1;
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <main+0x68>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80009aa:	bf00      	nop
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <main+0x5c>
 80009b0:	200000dc 	.word	0x200000dc
 80009b4:	40010c00 	.word	0x40010c00
 80009b8:	2000008c 	.word	0x2000008c

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	@ 0x40
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2228      	movs	r2, #40	@ 0x28
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 ff3e 	bl	800384c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e6:	2310      	movs	r3, #16
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fb9a 	bl	800212c <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009fe:	f000 f818 	bl	8000a32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fe08 	bl	8002630 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a26:	f000 f804 	bl	8000a32 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3740      	adds	r7, #64	@ 0x40
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a36:	b672      	cpsid	i
}
 8000a38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3a:	bf00      	nop
 8000a3c:	e7fd      	b.n	8000a3a <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	4a14      	ldr	r2, [pc, #80]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6193      	str	r3, [r2, #24]
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a0e      	ldr	r2, [pc, #56]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_MspInit+0x5c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_MspInit+0x60>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_MspInit+0x60>)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010000 	.word	0x40010000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(dir==2 && limit==-1)
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <SysTick_Handler+0x44>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d107      	bne.n	8000b0c <SysTick_Handler+0x1c>
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <SysTick_Handler+0x48>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d102      	bne.n	8000b0c <SysTick_Handler+0x1c>
	  {
		  dir=0;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <SysTick_Handler+0x44>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
	  }
	  if(dir==1 && limit==1)
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <SysTick_Handler+0x44>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d106      	bne.n	8000b22 <SysTick_Handler+0x32>
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <SysTick_Handler+0x48>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d102      	bne.n	8000b22 <SysTick_Handler+0x32>
	  {
		  dir=0;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <SysTick_Handler+0x44>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
	  }
	  Set_Motor1(dir);
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <SysTick_Handler+0x44>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd86 	bl	8000638 <Set_Motor1>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 fa4c 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000090 	.word	0x20000090
 8000b38:	2000008c 	.word	0x2000008c

08000b3c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000b42:	f000 fdab 	bl	800169c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000054 	.word	0x20000054

08000b50 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b56:	f000 fda1 	bl	800169c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000054 	.word	0x20000054

08000b64 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <CAN1_RX1_IRQHandler+0x10>)
 8000b6a:	f000 fd97 	bl	800169c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000054 	.word	0x20000054

08000b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <TIM2_IRQHandler+0x10>)
 8000b7e:	f002 f89f 	bl	8002cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000094 	.word	0x20000094

08000b8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	counter++;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <TIM3_IRQHandler+0x78>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <TIM3_IRQHandler+0x78>)
 8000ba0:	801a      	strh	r2, [r3, #0]
	if (counter>czas)
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <TIM3_IRQHandler+0x78>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <TIM3_IRQHandler+0x7c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dd22      	ble.n	8000bf8 <TIM3_IRQHandler+0x6c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	4815      	ldr	r0, [pc, #84]	@ (8000c0c <TIM3_IRQHandler+0x80>)
 8000bb8:	f001 fa6f 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	4812      	ldr	r0, [pc, #72]	@ (8000c0c <TIM3_IRQHandler+0x80>)
 8000bc2:	f001 fa6a 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <TIM3_IRQHandler+0x80>)
 8000bcc:	f001 fa65 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	@ 0x80
 8000bd4:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <TIM3_IRQHandler+0x80>)
 8000bd6:	f001 fa60 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be0:	480a      	ldr	r0, [pc, #40]	@ (8000c0c <TIM3_IRQHandler+0x80>)
 8000be2:	f001 fa5a 	bl	800209a <HAL_GPIO_WritePin>
		counter=0;
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <TIM3_IRQHandler+0x78>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000bec:	201d      	movs	r0, #29
 8000bee:	f001 f89e 	bl	8001d2e <HAL_NVIC_DisableIRQ>
		czas=0;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <TIM3_IRQHandler+0x7c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <TIM3_IRQHandler+0x84>)
 8000bfa:	f002 f861 	bl	8002cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000050 	.word	0x20000050
 8000c08:	2000004c 	.word	0x2000004c
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	200000dc 	.word	0x200000dc

08000c14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Switch1_Pin);
 8000c18:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000c1c:	f001 fa6e 	bl	80020fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Switch2_Pin);
 8000c20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c24:	f001 fa6a 	bl	80020fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Switch3_Pin);
 8000c28:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c2c:	f001 fa66 	bl	80020fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Switch4_Pin);
 8000c30:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c34:	f001 fa62 	bl	80020fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	@ 0x38
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c78:	4b32      	ldr	r3, [pc, #200]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000c7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000c80:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000c82:	2207      	movs	r2, #7
 8000c84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000c8e:	2263      	movs	r2, #99	@ 0x63
 8000c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9e:	4829      	ldr	r0, [pc, #164]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000ca0:	f001 fe24 	bl	80028ec <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000caa:	f7ff fec2 	bl	8000a32 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4822      	ldr	r0, [pc, #136]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000cbc:	f002 f9b2 	bl	8003024 <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000cc6:	f7ff feb4 	bl	8000a32 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cca:	481e      	ldr	r0, [pc, #120]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000ccc:	f001 feb0 	bl	8002a30 <HAL_TIM_PWM_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000cd6:	f7ff feac 	bl	8000a32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4816      	ldr	r0, [pc, #88]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000cea:	f002 fd3f 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000cf4:	f7ff fe9d 	bl	8000a32 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf8:	2360      	movs	r3, #96	@ 0x60
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000d10:	f002 f8c6 	bl	8002ea0 <HAL_TIM_PWM_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000d1a:	f7ff fe8a 	bl	8000a32 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	220c      	movs	r2, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000d26:	f002 f8bb 	bl	8002ea0 <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000d30:	f7ff fe7f 	bl	8000a32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <MX_TIM2_Init+0xfc>)
 8000d36:	f000 f895 	bl	8000e64 <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	@ 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000094 	.word	0x20000094

08000d48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d66:	4a1e      	ldr	r2, [pc, #120]	@ (8000de0 <MX_TIM3_Init+0x98>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3199;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d6c:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8000d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d7a:	2263      	movs	r2, #99	@ 0x63
 8000d7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d8a:	4814      	ldr	r0, [pc, #80]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000d8c:	f001 fdae 	bl	80028ec <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d96:	f7ff fe4c 	bl	8000a32 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000da8:	f002 f93c 	bl	8003024 <HAL_TIM_ConfigClockSource>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f7ff fe3e 	bl	8000a32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_TIM3_Init+0x94>)
 8000dc4:	f002 fcd2 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000dce:	f7ff fe30 	bl	8000a32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000dc 	.word	0x200000dc
 8000de0:	40000400 	.word	0x40000400

08000de4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df4:	d114      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_TIM_Base_MspInit+0x78>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <HAL_TIM_Base_MspInit+0x78>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_TIM_Base_MspInit+0x78>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	201c      	movs	r0, #28
 8000e14:	f000 ff61 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e18:	201c      	movs	r0, #28
 8000e1a:	f000 ff7a 	bl	8001d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e1e:	e018      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_TIM_Base_MspInit+0x7c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d113      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <HAL_TIM_Base_MspInit+0x78>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_TIM_Base_MspInit+0x78>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_TIM_Base_MspInit+0x78>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2102      	movs	r1, #2
 8000e46:	201d      	movs	r0, #29
 8000e48:	f000 ff47 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e4c:	201d      	movs	r0, #29
 8000e4e:	f000 ff60 	bl	8001d12 <HAL_NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40000400 	.word	0x40000400

08000e64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e82:	d12a      	bne.n	8000eda <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_TIM_MspPostInit+0x80>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a16      	ldr	r2, [pc, #88]	@ (8000ee4 <HAL_TIM_MspPostInit+0x80>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <HAL_TIM_MspPostInit+0x80>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Motor3_EN_Pin|Motor2_EN_Pin;
 8000e9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ea0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <HAL_TIM_MspPostInit+0x84>)
 8000eb2:	f000 ff57 	bl	8001d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_TIM_MspPostInit+0x88>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <HAL_TIM_MspPostInit+0x88>)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	40010000 	.word	0x40010000

08000ef0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef0:	f7ff fea4 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ef6:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a09      	ldr	r2, [pc, #36]	@ (8000f30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f0c:	4c09      	ldr	r4, [pc, #36]	@ (8000f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f002 fc9f 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1e:	f7ff fd17 	bl	8000950 <main>
  bx lr
 8000f22:	4770      	bx	lr
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f2c:	080038e8 	.word	0x080038e8
  ldr r2, =_sbss
 8000f30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f34:	20000128 	.word	0x20000128

08000f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_2_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_Init+0x28>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <HAL_Init+0x28>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 feb9 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	200f      	movs	r0, #15
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fd72 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fedf 	bl	8001d4a <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 fe99 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	@ (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_IncTick+0x1c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <HAL_IncTick+0x20>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a03      	ldr	r2, [pc, #12]	@ (8000fe8 <HAL_IncTick+0x20>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000124 	.word	0x20000124

08000fec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b02      	ldr	r3, [pc, #8]	@ (8000ffc <HAL_GetTick+0x10>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	20000124 	.word	0x20000124

08001000 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0ed      	b.n	80011ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff f906 	bl	8000230 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001034:	f7ff ffda 	bl	8000fec <HAL_GetTick>
 8001038:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800103a:	e012      	b.n	8001062 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800103c:	f7ff ffd6 	bl	8000fec <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b0a      	cmp	r3, #10
 8001048:	d90b      	bls.n	8001062 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2205      	movs	r2, #5
 800105a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0c5      	b.n	80011ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0e5      	beq.n	800103c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0202 	bic.w	r2, r2, #2
 800107e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001080:	f7ff ffb4 	bl	8000fec <HAL_GetTick>
 8001084:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001086:	e012      	b.n	80010ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001088:	f7ff ffb0 	bl	8000fec <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b0a      	cmp	r3, #10
 8001094:	d90b      	bls.n	80010ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2205      	movs	r2, #5
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e09f      	b.n	80011ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e5      	bne.n	8001088 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7e1b      	ldrb	r3, [r3, #24]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e007      	b.n	80010e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e5b      	ldrb	r3, [r3, #25]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e007      	b.n	8001110 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800110e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7e9b      	ldrb	r3, [r3, #26]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0220 	orr.w	r2, r2, #32
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	e007      	b.n	800113a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0220 	bic.w	r2, r2, #32
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7edb      	ldrb	r3, [r3, #27]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d108      	bne.n	8001154 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0210 	bic.w	r2, r2, #16
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e007      	b.n	8001164 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0210 	orr.w	r2, r2, #16
 8001162:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7f1b      	ldrb	r3, [r3, #28]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d108      	bne.n	800117e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0208 	orr.w	r2, r2, #8
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e007      	b.n	800118e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0208 	bic.w	r2, r2, #8
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7f5b      	ldrb	r3, [r3, #29]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d108      	bne.n	80011a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0204 	orr.w	r2, r2, #4
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e007      	b.n	80011b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0204 	bic.w	r2, r2, #4
 80011b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	ea42 0103 	orr.w	r1, r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b087      	sub	sp, #28
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800120c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800120e:	7cfb      	ldrb	r3, [r7, #19]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d003      	beq.n	800121c <HAL_CAN_ConfigFilter+0x26>
 8001214:	7cfb      	ldrb	r3, [r7, #19]
 8001216:	2b02      	cmp	r3, #2
 8001218:	f040 80aa 	bne.w	8001370 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	2201      	movs	r2, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d123      	bne.n	800129e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	401a      	ands	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001278:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3248      	adds	r2, #72	@ 0x48
 800127e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001292:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001294:	6979      	ldr	r1, [r7, #20]
 8001296:	3348      	adds	r3, #72	@ 0x48
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d122      	bne.n	80012ec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3248      	adds	r2, #72	@ 0x48
 80012cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e2:	6979      	ldr	r1, [r7, #20]
 80012e4:	3348      	adds	r3, #72	@ 0x48
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d109      	bne.n	8001308 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001306:	e007      	b.n	8001318 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	431a      	orrs	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d109      	bne.n	8001334 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001332:	e007      	b.n	8001344 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	431a      	orrs	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001362:	f023 0201 	bic.w	r2, r3, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	e006      	b.n	800137e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001374:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
  }
}
 800137e:	4618      	mov	r0, r3
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d12e      	bne.n	80013fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013b4:	f7ff fe1a 	bl	8000fec <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013ba:	e012      	b.n	80013e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013bc:	f7ff fe16 	bl	8000fec <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b0a      	cmp	r3, #10
 80013c8:	d90b      	bls.n	80013e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2205      	movs	r2, #5
 80013da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e012      	b.n	8001408 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e5      	bne.n	80013bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e006      	b.n	8001408 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
  }
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001424:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d003      	beq.n	8001434 <HAL_CAN_GetRxMessage+0x24>
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b02      	cmp	r3, #2
 8001430:	f040 8103 	bne.w	800163a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10e      	bne.n	8001458 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d116      	bne.n	8001476 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0f7      	b.n	8001648 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d107      	bne.n	8001476 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e0e8      	b.n	8001648 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	331b      	adds	r3, #27
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4413      	add	r3, r2
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0204 	and.w	r2, r3, #4
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10c      	bne.n	80014ae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	331b      	adds	r3, #27
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0d5b      	lsrs	r3, r3, #21
 80014a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e00b      	b.n	80014c6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	331b      	adds	r3, #27
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4413      	add	r3, r2
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	331b      	adds	r3, #27
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0202 	and.w	r2, r3, #2
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	331b      	adds	r3, #27
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	3304      	adds	r3, #4
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2208      	movs	r2, #8
 80014f8:	611a      	str	r2, [r3, #16]
 80014fa:	e00b      	b.n	8001514 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	331b      	adds	r3, #27
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4413      	add	r3, r2
 8001508:	3304      	adds	r3, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 020f 	and.w	r2, r3, #15
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	331b      	adds	r3, #27
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4413      	add	r3, r2
 8001520:	3304      	adds	r3, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	331b      	adds	r3, #27
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	3304      	adds	r3, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	b29a      	uxth	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4413      	add	r3, r2
 8001564:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	0a1a      	lsrs	r2, r3, #8
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0c1a      	lsrs	r2, r3, #16
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3302      	adds	r3, #2
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	4413      	add	r3, r2
 8001598:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0e1a      	lsrs	r2, r3, #24
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3303      	adds	r3, #3
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3304      	adds	r3, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0a1a      	lsrs	r2, r3, #8
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3305      	adds	r3, #5
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0c1a      	lsrs	r2, r3, #16
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3306      	adds	r3, #6
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0e1a      	lsrs	r2, r3, #24
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3307      	adds	r3, #7
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d108      	bne.n	8001626 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	e007      	b.n	8001636 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0220 	orr.w	r2, r2, #32
 8001634:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e006      	b.n	8001648 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
  }
}
 8001648:	4618      	mov	r0, r3
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001662:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d002      	beq.n	8001670 <HAL_CAN_ActivateNotification+0x1e>
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d109      	bne.n	8001684 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6959      	ldr	r1, [r3, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e006      	b.n	8001692 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d07c      	beq.n	80017dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2201      	movs	r2, #1
 80016f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f983 	bl	8001a0a <HAL_CAN_TxMailbox0CompleteCallback>
 8001704:	e016      	b.n	8001734 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
 8001718:	e00c      	b.n	8001734 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
 800172c:	e002      	b.n	8001734 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f986 	bl	8001a40 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d024      	beq.n	8001788 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001746:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f962 	bl	8001a1c <HAL_CAN_TxMailbox1CompleteCallback>
 8001758:	e016      	b.n	8001788 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
 800176c:	e00c      	b.n	8001788 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001780:	e002      	b.n	8001788 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f965 	bl	8001a52 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d024      	beq.n	80017dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800179a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f941 	bl	8001a2e <HAL_CAN_TxMailbox2CompleteCallback>
 80017ac:	e016      	b.n	80017dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c0:	e00c      	b.n	80017dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d4:	e002      	b.n	80017dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f944 	bl	8001a64 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00c      	beq.n	8001800 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2210      	movs	r2, #16
 80017fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2208      	movs	r2, #8
 800181a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f92a 	bl	8001a76 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7fe fd5c 	bl	80002f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00c      	beq.n	8001864 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2210      	movs	r2, #16
 8001862:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2208      	movs	r2, #8
 800187e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f90a 	bl	8001a9a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	d009      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8f2 	bl	8001a88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2210      	movs	r2, #16
 80018be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8f3 	bl	8001aac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d006      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2208      	movs	r2, #8
 80018e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8eb 	bl	8001abe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d07b      	beq.n	80019ea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d072      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001956:	2b00      	cmp	r3, #0
 8001958:	d043      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03e      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800196a:	2b60      	cmp	r3, #96	@ 0x60
 800196c:	d02b      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x32a>
 800196e:	2b60      	cmp	r3, #96	@ 0x60
 8001970:	d82e      	bhi.n	80019d0 <HAL_CAN_IRQHandler+0x334>
 8001972:	2b50      	cmp	r3, #80	@ 0x50
 8001974:	d022      	beq.n	80019bc <HAL_CAN_IRQHandler+0x320>
 8001976:	2b50      	cmp	r3, #80	@ 0x50
 8001978:	d82a      	bhi.n	80019d0 <HAL_CAN_IRQHandler+0x334>
 800197a:	2b40      	cmp	r3, #64	@ 0x40
 800197c:	d019      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x316>
 800197e:	2b40      	cmp	r3, #64	@ 0x40
 8001980:	d826      	bhi.n	80019d0 <HAL_CAN_IRQHandler+0x334>
 8001982:	2b30      	cmp	r3, #48	@ 0x30
 8001984:	d010      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x30c>
 8001986:	2b30      	cmp	r3, #48	@ 0x30
 8001988:	d822      	bhi.n	80019d0 <HAL_CAN_IRQHandler+0x334>
 800198a:	2b10      	cmp	r3, #16
 800198c:	d002      	beq.n	8001994 <HAL_CAN_IRQHandler+0x2f8>
 800198e:	2b20      	cmp	r3, #32
 8001990:	d005      	beq.n	800199e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001992:	e01d      	b.n	80019d0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800199c:	e019      	b.n	80019d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a6:	e014      	b.n	80019d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	f043 0320 	orr.w	r3, r3, #32
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019b0:	e00f      	b.n	80019d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019ba:	e00a      	b.n	80019d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019c4:	e005      	b.n	80019d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019ce:	e000      	b.n	80019d2 <HAL_CAN_IRQHandler+0x336>
            break;
 80019d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2204      	movs	r2, #4
 80019e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f867 	bl	8001ad0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
	...

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4906      	ldr	r1, [pc, #24]	@ (8001b7c <__NVIC_EnableIRQ+0x34>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db12      	blt.n	8001bb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	490a      	ldr	r1, [pc, #40]	@ (8001bc4 <__NVIC_DisableIRQ+0x44>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	3320      	adds	r3, #32
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bac:	f3bf 8f4f 	dsb	sy
}
 8001bb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb2:	f3bf 8f6f 	isb	sy
}
 8001bb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff90 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff09 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff1e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff11 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff1f 	bl	8001b80 <__NVIC_DisableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff94 	bl	8001c80 <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b08b      	sub	sp, #44	@ 0x2c
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e169      	b.n	800204c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8158 	bne.w	8002046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a9a      	ldr	r2, [pc, #616]	@ (8002004 <HAL_GPIO_Init+0x2a0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d05e      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001da0:	4a98      	ldr	r2, [pc, #608]	@ (8002004 <HAL_GPIO_Init+0x2a0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d875      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001da6:	4a98      	ldr	r2, [pc, #608]	@ (8002008 <HAL_GPIO_Init+0x2a4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d058      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dac:	4a96      	ldr	r2, [pc, #600]	@ (8002008 <HAL_GPIO_Init+0x2a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d86f      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001db2:	4a96      	ldr	r2, [pc, #600]	@ (800200c <HAL_GPIO_Init+0x2a8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d052      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001db8:	4a94      	ldr	r2, [pc, #592]	@ (800200c <HAL_GPIO_Init+0x2a8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d869      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dbe:	4a94      	ldr	r2, [pc, #592]	@ (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04c      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dc4:	4a92      	ldr	r2, [pc, #584]	@ (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d863      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dca:	4a92      	ldr	r2, [pc, #584]	@ (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d046      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a90      	ldr	r2, [pc, #576]	@ (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d85d      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d82a      	bhi.n	8001e30 <HAL_GPIO_Init+0xcc>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d859      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dde:	a201      	add	r2, pc, #4	@ (adr r2, 8001de4 <HAL_GPIO_Init+0x80>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e39 	.word	0x08001e39
 8001dec:	08001e4b 	.word	0x08001e4b
 8001df0:	08001e8d 	.word	0x08001e8d
 8001df4:	08001e93 	.word	0x08001e93
 8001df8:	08001e93 	.word	0x08001e93
 8001dfc:	08001e93 	.word	0x08001e93
 8001e00:	08001e93 	.word	0x08001e93
 8001e04:	08001e93 	.word	0x08001e93
 8001e08:	08001e93 	.word	0x08001e93
 8001e0c:	08001e93 	.word	0x08001e93
 8001e10:	08001e93 	.word	0x08001e93
 8001e14:	08001e93 	.word	0x08001e93
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e93 	.word	0x08001e93
 8001e20:	08001e93 	.word	0x08001e93
 8001e24:	08001e93 	.word	0x08001e93
 8001e28:	08001e41 	.word	0x08001e41
 8001e2c:	08001e55 	.word	0x08001e55
 8001e30:	4a79      	ldr	r2, [pc, #484]	@ (8002018 <HAL_GPIO_Init+0x2b4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e36:	e02c      	b.n	8001e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e029      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	3304      	adds	r3, #4
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e024      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	3308      	adds	r3, #8
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e01f      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e01a      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e66:	2304      	movs	r3, #4
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e013      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e74:	2308      	movs	r3, #8
 8001e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	611a      	str	r2, [r3, #16]
          break;
 8001e7e:	e009      	b.n	8001e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e80:	2308      	movs	r3, #8
 8001e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	615a      	str	r2, [r3, #20]
          break;
 8001e8a:	e003      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          break;
 8001e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2bff      	cmp	r3, #255	@ 0xff
 8001e98:	d801      	bhi.n	8001e9e <HAL_GPIO_Init+0x13a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_Init+0x13e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_GPIO_Init+0x14c>
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x152>
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	3b08      	subs	r3, #8
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	6a39      	ldr	r1, [r7, #32]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80b1 	beq.w	8002046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001efc:	4a48      	ldr	r2, [pc, #288]	@ (8002020 <HAL_GPIO_Init+0x2bc>)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a40      	ldr	r2, [pc, #256]	@ (8002024 <HAL_GPIO_Init+0x2c0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_GPIO_Init+0x1ec>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002028 <HAL_GPIO_Init+0x2c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00d      	beq.n	8001f4c <HAL_GPIO_Init+0x1e8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3e      	ldr	r2, [pc, #248]	@ (800202c <HAL_GPIO_Init+0x2c8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002030 <HAL_GPIO_Init+0x2cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_GPIO_Init+0x1e0>
 8001f40:	2303      	movs	r3, #3
 8001f42:	e006      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f50:	2300      	movs	r3, #0
 8001f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f62:	492f      	ldr	r1, [pc, #188]	@ (8002020 <HAL_GPIO_Init+0x2bc>)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	492c      	ldr	r1, [pc, #176]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4928      	ldr	r1, [pc, #160]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa4:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4922      	ldr	r1, [pc, #136]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	491e      	ldr	r1, [pc, #120]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4918      	ldr	r1, [pc, #96]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4914      	ldr	r1, [pc, #80]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d021      	beq.n	8002038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	490e      	ldr	r1, [pc, #56]	@ (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e021      	b.n	8002046 <HAL_GPIO_Init+0x2e2>
 8002002:	bf00      	nop
 8002004:	10320000 	.word	0x10320000
 8002008:	10310000 	.word	0x10310000
 800200c:	10220000 	.word	0x10220000
 8002010:	10210000 	.word	0x10210000
 8002014:	10120000 	.word	0x10120000
 8002018:	10110000 	.word	0x10110000
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	40010800 	.word	0x40010800
 8002028:	40010c00 	.word	0x40010c00
 800202c:	40011000 	.word	0x40011000
 8002030:	40011400 	.word	0x40011400
 8002034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_GPIO_Init+0x304>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	4909      	ldr	r1, [pc, #36]	@ (8002068 <HAL_GPIO_Init+0x304>)
 8002042:	4013      	ands	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae8e 	bne.w	8001d78 <HAL_GPIO_Init+0x14>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	@ 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]
 80020a6:	4613      	mov	r3, r2
 80020a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020aa:	787b      	ldrb	r3, [r7, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b6:	e003      	b.n	80020c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	041a      	lsls	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	041a      	lsls	r2, r3, #16
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	400b      	ands	r3, r1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d006      	beq.n	8002120 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f9d4 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40010400 	.word	0x40010400

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e272      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b92      	ldr	r3, [pc, #584]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002158:	4b8f      	ldr	r3, [pc, #572]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
 8002164:	4b8c      	ldr	r3, [pc, #560]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b89      	ldr	r3, [pc, #548]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x12c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e24c      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76>
 8002194:	4b80      	ldr	r3, [pc, #512]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7f      	ldr	r2, [pc, #508]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b78      	ldr	r3, [pc, #480]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a77      	ldr	r2, [pc, #476]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xbc>
 80021ce:	4b72      	ldr	r3, [pc, #456]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a71      	ldr	r2, [pc, #452]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6f      	ldr	r3, [pc, #444]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6e      	ldr	r2, [pc, #440]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe fef0 	bl	8000fec <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7fe feec 	bl	8000fec <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e200      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5d      	ldr	r3, [pc, #372]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe4>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fedc 	bl	8000fec <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe fed8 	bl	8000fec <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1ec      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b53      	ldr	r3, [pc, #332]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x10c>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b4c      	ldr	r3, [pc, #304]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002272:	4b49      	ldr	r3, [pc, #292]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
 800227e:	4b46      	ldr	r3, [pc, #280]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c0      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4939      	ldr	r1, [pc, #228]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe fe91 	bl	8000fec <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fe8d 	bl	8000fec <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4927      	ldr	r1, [pc, #156]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fe70 	bl	8000fec <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fe6c 	bl	8000fec <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e180      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7fe fe50 	bl	8000fec <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fe4c 	bl	8000fec <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e160      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f000 fa9e 	bl	80028b0 <RCC_Delay>
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7fe fe36 	bl	8000fec <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002382:	e00f      	b.n	80023a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe fe32 	bl	8000fec <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e146      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	42420000 	.word	0x42420000
 80023a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b92      	ldr	r3, [pc, #584]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e9      	bne.n	8002384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a6 	beq.w	800250a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b8b      	ldr	r3, [pc, #556]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a87      	ldr	r2, [pc, #540]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b85      	ldr	r3, [pc, #532]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b82      	ldr	r3, [pc, #520]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b7f      	ldr	r3, [pc, #508]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7e      	ldr	r2, [pc, #504]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe fdf3 	bl	8000fec <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7fe fdef 	bl	8000fec <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	@ 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e103      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b75      	ldr	r3, [pc, #468]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002430:	4b6f      	ldr	r3, [pc, #444]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a6e      	ldr	r2, [pc, #440]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e02d      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002446:	4b6a      	ldr	r3, [pc, #424]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a69      	ldr	r2, [pc, #420]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b67      	ldr	r3, [pc, #412]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a66      	ldr	r2, [pc, #408]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x356>
 8002468:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a60      	ldr	r2, [pc, #384]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4b5e      	ldr	r3, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a5d      	ldr	r2, [pc, #372]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002482:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a5a      	ldr	r2, [pc, #360]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fda3 	bl	8000fec <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe fd9f 	bl	8000fec <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0b1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x37e>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fd8d 	bl	8000fec <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fd89 	bl	8000fec <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e09b      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b40      	ldr	r3, [pc, #256]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b3c      	ldr	r3, [pc, #240]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a3b      	ldr	r2, [pc, #236]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002514:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d061      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d146      	bne.n	80025b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fd5d 	bl	8000fec <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fd59 	bl	8000fec <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e06d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4921      	ldr	r1, [pc, #132]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002570:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a19      	ldr	r1, [r3, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	430b      	orrs	r3, r1
 8002582:	491b      	ldr	r1, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fd2d 	bl	8000fec <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fd29 	bl	8000fec <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
 80025b4:	e035      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fd16 	bl	8000fec <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fd12 	bl	8000fec <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e026      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x498>
 80025e2:	e01e      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e019      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <HAL_RCC_OscConfig+0x500>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0d0      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b6a      	ldr	r3, [pc, #424]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d910      	bls.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b67      	ldr	r3, [pc, #412]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4965      	ldr	r1, [pc, #404]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b63      	ldr	r3, [pc, #396]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b8      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268c:	4b59      	ldr	r3, [pc, #356]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a4:	4b53      	ldr	r3, [pc, #332]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b50      	ldr	r3, [pc, #320]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	494d      	ldr	r1, [pc, #308]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d040      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d115      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e07f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b41      	ldr	r3, [pc, #260]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e073      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06b      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4936      	ldr	r1, [pc, #216]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fc64 	bl	8000fec <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fc60 	bl	8000fec <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e053      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d210      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4922      	ldr	r1, [pc, #136]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4916      	ldr	r1, [pc, #88]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027aa:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490e      	ldr	r1, [pc, #56]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027be:	f000 f821 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490a      	ldr	r1, [pc, #40]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <HAL_RCC_ClockConfig+0x1d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fbc2 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	080038bc 	.word	0x080038bc
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x30>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x36>
 8002832:	e027      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	e027      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0c5b      	lsrs	r3, r3, #17
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002866:	fb03 f202 	mul.w	r2, r3, r2
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e004      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002878:	fb02 f303 	mul.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	613b      	str	r3, [r7, #16]
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8002886:	613b      	str	r3, [r7, #16]
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	693b      	ldr	r3, [r7, #16]
}
 800288c:	4618      	mov	r0, r3
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	080038cc 	.word	0x080038cc
 80028a4:	080038dc 	.word	0x080038dc
 80028a8:	003d0900 	.word	0x003d0900
 80028ac:	007a1200 	.word	0x007a1200

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000000 	.word	0x20000000
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fa66 	bl	8000de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fc6e 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e03a      	b.n	8002a1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a18      	ldr	r2, [pc, #96]	@ (8002a24 <HAL_TIM_Base_Start_IT+0x98>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00e      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x58>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ce:	d009      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x58>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a14      	ldr	r2, [pc, #80]	@ (8002a28 <HAL_TIM_Base_Start_IT+0x9c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x58>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <HAL_TIM_Base_Start_IT+0xa0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d111      	bne.n	8002a08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d010      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a06:	e007      	b.n	8002a18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40000800 	.word	0x40000800

08002a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e041      	b.n	8002ac6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f839 	bl	8002ace <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f000 fbcc 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_TIM_PWM_Start_IT+0x28>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e022      	b.n	8002b4e <HAL_TIM_PWM_Start_IT+0x6e>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d109      	bne.n	8002b22 <HAL_TIM_PWM_Start_IT+0x42>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e015      	b.n	8002b4e <HAL_TIM_PWM_Start_IT+0x6e>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d109      	bne.n	8002b3c <HAL_TIM_PWM_Start_IT+0x5c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e008      	b.n	8002b4e <HAL_TIM_PWM_Start_IT+0x6e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0a9      	b.n	8002caa <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start_IT+0x86>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b64:	e013      	b.n	8002b8e <HAL_TIM_PWM_Start_IT+0xae>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start_IT+0x96>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b74:	e00b      	b.n	8002b8e <HAL_TIM_PWM_Start_IT+0xae>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_PWM_Start_IT+0xa6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b84:	e003      	b.n	8002b8e <HAL_TIM_PWM_Start_IT+0xae>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d841      	bhi.n	8002c18 <HAL_TIM_PWM_Start_IT+0x138>
 8002b94:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <HAL_TIM_PWM_Start_IT+0xbc>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bd1 	.word	0x08002bd1
 8002ba0:	08002c19 	.word	0x08002c19
 8002ba4:	08002c19 	.word	0x08002c19
 8002ba8:	08002c19 	.word	0x08002c19
 8002bac:	08002be3 	.word	0x08002be3
 8002bb0:	08002c19 	.word	0x08002c19
 8002bb4:	08002c19 	.word	0x08002c19
 8002bb8:	08002c19 	.word	0x08002c19
 8002bbc:	08002bf5 	.word	0x08002bf5
 8002bc0:	08002c19 	.word	0x08002c19
 8002bc4:	08002c19 	.word	0x08002c19
 8002bc8:	08002c19 	.word	0x08002c19
 8002bcc:	08002c07 	.word	0x08002c07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0202 	orr.w	r2, r2, #2
 8002bde:	60da      	str	r2, [r3, #12]
      break;
 8002be0:	e01d      	b.n	8002c1e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0204 	orr.w	r2, r2, #4
 8002bf0:	60da      	str	r2, [r3, #12]
      break;
 8002bf2:	e014      	b.n	8002c1e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0208 	orr.w	r2, r2, #8
 8002c02:	60da      	str	r2, [r3, #12]
      break;
 8002c04:	e00b      	b.n	8002c1e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0210 	orr.w	r2, r2, #16
 8002c14:	60da      	str	r2, [r3, #12]
      break;
 8002c16:	e002      	b.n	8002c1e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d141      	bne.n	8002ca8 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	6839      	ldr	r1, [r7, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fd79 	bl	8003724 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb4 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a18      	ldr	r2, [pc, #96]	@ (8002cb4 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00e      	beq.n	8002c74 <HAL_TIM_PWM_Start_IT+0x194>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c5e:	d009      	beq.n	8002c74 <HAL_TIM_PWM_Start_IT+0x194>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_TIM_PWM_Start_IT+0x194>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <HAL_TIM_PWM_Start_IT+0x1dc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d010      	beq.n	8002ca8 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c96:	e007      	b.n	8002ca8 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	40000800 	.word	0x40000800

08002cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d020      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0202 	mvn.w	r2, #2
 8002cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa63 	bl	80031d6 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa56 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fa65 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d020      	beq.n	8002d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0204 	mvn.w	r2, #4
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa3d 	bl	80031d6 <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa30 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa3f 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d020      	beq.n	8002dbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01b      	beq.n	8002dbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0208 	mvn.w	r2, #8
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2204      	movs	r2, #4
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa17 	bl	80031d6 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa0a 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa19 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d020      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01b      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0210 	mvn.w	r2, #16
 8002dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f9f1 	bl	80031d6 <HAL_TIM_IC_CaptureCallback>
 8002df4:	e005      	b.n	8002e02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9e4 	bl	80031c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f9f3 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00c      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0201 	mvn.w	r2, #1
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f9c3 	bl	80031b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fcf5 	bl	800383a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9c3 	bl	80031fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00c      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0220 	mvn.w	r2, #32
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fcc8 	bl	8003828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0ae      	b.n	800301c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	f200 809f 	bhi.w	800300c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ece:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002f09 	.word	0x08002f09
 8002ed8:	0800300d 	.word	0x0800300d
 8002edc:	0800300d 	.word	0x0800300d
 8002ee0:	0800300d 	.word	0x0800300d
 8002ee4:	08002f49 	.word	0x08002f49
 8002ee8:	0800300d 	.word	0x0800300d
 8002eec:	0800300d 	.word	0x0800300d
 8002ef0:	0800300d 	.word	0x0800300d
 8002ef4:	08002f8b 	.word	0x08002f8b
 8002ef8:	0800300d 	.word	0x0800300d
 8002efc:	0800300d 	.word	0x0800300d
 8002f00:	0800300d 	.word	0x0800300d
 8002f04:	08002fcb 	.word	0x08002fcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f9ea 	bl	80032e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0208 	orr.w	r2, r2, #8
 8002f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0204 	bic.w	r2, r2, #4
 8002f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	619a      	str	r2, [r3, #24]
      break;
 8002f46:	e064      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fa30 	bl	80033b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6999      	ldr	r1, [r3, #24]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	619a      	str	r2, [r3, #24]
      break;
 8002f88:	e043      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa79 	bl	8003488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0208 	orr.w	r2, r2, #8
 8002fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0204 	bic.w	r2, r2, #4
 8002fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	61da      	str	r2, [r3, #28]
      break;
 8002fc8:	e023      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fac3 	bl	800355c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69d9      	ldr	r1, [r3, #28]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	61da      	str	r2, [r3, #28]
      break;
 800300a:	e002      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
      break;
 8003010:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_TIM_ConfigClockSource+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e0b4      	b.n	80031aa <HAL_TIM_ConfigClockSource+0x186>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800305e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003078:	d03e      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xd4>
 800307a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307e:	f200 8087 	bhi.w	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003086:	f000 8086 	beq.w	8003196 <HAL_TIM_ConfigClockSource+0x172>
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308e:	d87f      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b70      	cmp	r3, #112	@ 0x70
 8003092:	d01a      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xa6>
 8003094:	2b70      	cmp	r3, #112	@ 0x70
 8003096:	d87b      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b60      	cmp	r3, #96	@ 0x60
 800309a:	d050      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x11a>
 800309c:	2b60      	cmp	r3, #96	@ 0x60
 800309e:	d877      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b50      	cmp	r3, #80	@ 0x50
 80030a2:	d03c      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xfa>
 80030a4:	2b50      	cmp	r3, #80	@ 0x50
 80030a6:	d873      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d058      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x13a>
 80030ac:	2b40      	cmp	r3, #64	@ 0x40
 80030ae:	d86f      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b30      	cmp	r3, #48	@ 0x30
 80030b2:	d064      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030b4:	2b30      	cmp	r3, #48	@ 0x30
 80030b6:	d86b      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d060      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d867      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d05c      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d05a      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	e062      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	f000 fb04 	bl	80036e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	609a      	str	r2, [r3, #8]
      break;
 80030f6:	e04f      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003108:	f000 faed 	bl	80036e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800311a:	609a      	str	r2, [r3, #8]
      break;
 800311c:	e03c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	461a      	mov	r2, r3
 800312c:	f000 fa64 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2150      	movs	r1, #80	@ 0x50
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fabb 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 800313c:	e02c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800314a:	461a      	mov	r2, r3
 800314c:	f000 fa82 	bl	8003654 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2160      	movs	r1, #96	@ 0x60
 8003156:	4618      	mov	r0, r3
 8003158:	f000 faab 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 800315c:	e01c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	461a      	mov	r2, r3
 800316c:	f000 fa44 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2140      	movs	r1, #64	@ 0x40
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa9b 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 800317c:	e00c      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 fa92 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 800318e:	e003      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      break;
 8003194:	e000      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a2f      	ldr	r2, [pc, #188]	@ (80032dc <TIM_Base_SetConfig+0xd0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00b      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322a:	d007      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a2c      	ldr	r2, [pc, #176]	@ (80032e0 <TIM_Base_SetConfig+0xd4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a2b      	ldr	r2, [pc, #172]	@ (80032e4 <TIM_Base_SetConfig+0xd8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a22      	ldr	r2, [pc, #136]	@ (80032dc <TIM_Base_SetConfig+0xd0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00b      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325c:	d007      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1f      	ldr	r2, [pc, #124]	@ (80032e0 <TIM_Base_SetConfig+0xd4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1e      	ldr	r2, [pc, #120]	@ (80032e4 <TIM_Base_SetConfig+0xd8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d108      	bne.n	8003280 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0d      	ldr	r2, [pc, #52]	@ (80032dc <TIM_Base_SetConfig+0xd0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d103      	bne.n	80032b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	611a      	str	r2, [r3, #16]
  }
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800

080032e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 0201 	bic.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 0302 	bic.w	r3, r3, #2
 8003330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <TIM_OC1_SetConfig+0xc8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10c      	bne.n	800335e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0308 	bic.w	r3, r3, #8
 800334a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a13      	ldr	r2, [pc, #76]	@ (80033b0 <TIM_OC1_SetConfig+0xc8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00

080033b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 0210 	bic.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0320 	bic.w	r3, r3, #32
 80033fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1d      	ldr	r2, [pc, #116]	@ (8003484 <TIM_OC2_SetConfig+0xd0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10d      	bne.n	8003430 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800341a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800342e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a14      	ldr	r2, [pc, #80]	@ (8003484 <TIM_OC2_SetConfig+0xd0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d113      	bne.n	8003460 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800343e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00

08003488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <TIM_OC3_SetConfig+0xd0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10d      	bne.n	8003502 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <TIM_OC3_SetConfig+0xd0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d113      	bne.n	8003532 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00

0800355c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0f      	ldr	r2, [pc, #60]	@ (80035f4 <TIM_OC4_SetConfig+0x98>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d109      	bne.n	80035d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00

080035f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 030a 	bic.w	r3, r3, #10
 8003634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0210 	bic.w	r2, r3, #16
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	031b      	lsls	r3, r3, #12
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	621a      	str	r2, [r3, #32]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003700:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	431a      	orrs	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4313      	orrs	r3, r2
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1a      	ldr	r2, [r3, #32]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e046      	b.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a16      	ldr	r2, [pc, #88]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d0:	d009      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a10      	ldr	r2, [pc, #64]	@ (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10c      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800

08003828 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <memset>:
 800384c:	4603      	mov	r3, r0
 800384e:	4402      	add	r2, r0
 8003850:	4293      	cmp	r3, r2
 8003852:	d100      	bne.n	8003856 <memset+0xa>
 8003854:	4770      	bx	lr
 8003856:	f803 1b01 	strb.w	r1, [r3], #1
 800385a:	e7f9      	b.n	8003850 <memset+0x4>

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	2600      	movs	r6, #0
 8003860:	4d0c      	ldr	r5, [pc, #48]	@ (8003894 <__libc_init_array+0x38>)
 8003862:	4c0d      	ldr	r4, [pc, #52]	@ (8003898 <__libc_init_array+0x3c>)
 8003864:	1b64      	subs	r4, r4, r5
 8003866:	10a4      	asrs	r4, r4, #2
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	f000 f81a 	bl	80038a4 <_init>
 8003870:	2600      	movs	r6, #0
 8003872:	4d0a      	ldr	r5, [pc, #40]	@ (800389c <__libc_init_array+0x40>)
 8003874:	4c0a      	ldr	r4, [pc, #40]	@ (80038a0 <__libc_init_array+0x44>)
 8003876:	1b64      	subs	r4, r4, r5
 8003878:	10a4      	asrs	r4, r4, #2
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f855 3b04 	ldr.w	r3, [r5], #4
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f855 3b04 	ldr.w	r3, [r5], #4
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	080038e0 	.word	0x080038e0
 8003898:	080038e0 	.word	0x080038e0
 800389c:	080038e0 	.word	0x080038e0
 80038a0:	080038e4 	.word	0x080038e4

080038a4 <_init>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr

080038b0 <_fini>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr
